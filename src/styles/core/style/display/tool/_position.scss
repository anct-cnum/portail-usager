////
/// Core Tools : Global position
/// @group core
////

@mixin build-positions() {
  $types: map-get($position-settings, types);
  $position-vars: map-get($display-vars, position);
  $buildBreakpoints: map-get($position-vars, breakpoints);
  $breakpointsList: if($buildBreakpoints == all, $breakpoints, $buildBreakpoints);

  @if ($position-vars != true and map-get($position-vars, active) != false) {
    @each $type in $types {
      #{ns(position)}--#{$type} {
        position: $type !important;
      }
    }

    @if ($breakpointsList != false) {
      @each $bp, $limit in $breakpointsList {
        @each $type in $types {
          @include respond-from($bp) {
            #{ns(position)}--#{$type}-#{$bp} {
              position: $type !important;
            }
          }
        }
      }
    }
  }
}

@function _position-side-name($prop, $value: 1, $unit: null, $breakpoint: null) {
  $formatedValue: '';
  $end: '';

  @if type-of($value) == 'map' {
    $formatedValue: map-keys($value);
  } @else {
    $formatedValue: '#{$value}';
  }

  @if type-of($value) == 'number' and $value < 0 {
    $formatedValue: 'n#{abs($value)}';
  }

  @if $value != 0 and $unit != null {
    $formatedValue: '#{$formatedValue}#{$unit}';
  }

  @if $breakpoint != null {
    $end: '-#{$breakpoint}';
  }

  $selector: '#{$prop}-#{$formatedValue}#{$end}';

  @return $selector;
}

@function _position-side-selectors($prop, $value, $breakpoint) {
  @if type-of($value) != 'number' {
    @return '#{ns(_position-side-name($prop, $value, null, $breakpoint))}';
  }

  $w: null;
  @if (abs($value) % 2) == 0 and $value != 0 {
    $w: abs($value) * 0.5;
  }

  $selectors: '#{ns(_position-side-name($prop, $value, v, $breakpoint))}';

  @if $w != null {
    $selectors: '#{$selectors},#{ns(_position-side-name($prop, $value * 0.5, w, $breakpoint))}';
  }

  @return $selectors;
}

@mixin _position-side-variations(
  $sides: (
    top,
    right,
    bottom,
    left
  ),
  $value: 1,
  $breakpoint: null
) {
  $v: $value;

  @if type-of($value) == 'number' {
    $v: space('#{$value}v');
  }

  @each $prop in $sides {
    #{_position-side-selectors($prop, $value, $breakpoint)} {
      @if type-of($v) == 'map' {
        #{$prop}: map-values($v) !important;
      } @else {
        #{$prop}: $v !important;
      }
    }
  }
}

@mixin _position-side-properties($props, $breakpoint: null) {
  $special: map_get($props, special);
  $sides: map-get($position-settings, sides);

  @if $special != null {
    @each $specialVal in $special {
      @include _position-side-variations($sides, $specialVal, $breakpoint);
    }
  }
}

@mixin build-position-sides() {
  $sides: map-get($position-settings, sides);
  $position-vars: map-get($display-vars, position);
  $position-values-vars: map-get($display-vars, 'position-values');
  $buildBreakpoints: map-get($position-vars, breakpoints);
  $breakpointsList: if($buildBreakpoints == all, $breakpoints, $buildBreakpoints);

  @if ($position-values-vars != false and map-get($position-values-vars, active) != false) {
    @include _position-side-properties($position-values-vars);

    @if ($breakpointsList != false) {
      @each $bp, $limit in $breakpointsList {
        @include respond-from($bp) {
          @include _position-side-properties($position-values-vars, $bp);
        }
      }
    }
  }
}

@mixin _position-alignments-variation($values, $axis, $breakpoint: null) {
  @if (map-has-key($values, $axis)) {
    $end: '';

    @if $breakpoint != null {
      $end: '-#{$breakpoint}';
    }

    @each $key, $value in map-get($values, $axis) {
      #{ns(translate-#{$axis}-#{$key}#{$end})} {
        transform: translate#{to-upper-case($axis) }($value);
      }
    }
  }
}

@mixin _position-alignments-properties($props, $breakpoint: null) {
  $values: map_get($props, values);

  @include _position-alignments-variation($values, x, $breakpoint);
  @include _position-alignments-variation($values, y, $breakpoint);
}

@mixin build-position-alignments() {
  $position-vars: map-get($display-vars, position);
  $position-alignments-vars: map-get($display-vars, 'position-alignments');
  $buildBreakpoints: map-get($position-vars, breakpoints);
  $breakpointsList: if($buildBreakpoints == all, $breakpoints, $buildBreakpoints);

  @if ($position-alignments-vars != false and map-get($position-alignments-vars, active) != false) {
    @include _position-alignments-properties($position-alignments-vars);

    @if ($breakpointsList != false) {
      @each $bp, $limit in $breakpointsList {
        @include respond-from($bp) {
          @include _position-alignments-properties($position-alignments-vars, $bp);
        }
      }
    }
  }
}
